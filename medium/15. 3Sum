https://leetcode.com/problems/3sum/


Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

//116 ms	15.7 MB
vector<vector<int>> threeSum(vector<int>& nums) {
	vector<vector<int>> ans;
	int n = nums.size();
	sort(nums.begin(), nums.end());
	for (int i = 0; i < n; i++) {
		int target = -nums[i];
		int low = i + 1, high = n - 1;
		if (i >= 1 && nums[i] == nums[i - 1])
			continue;
		while (low < high) {
			if (low > i + 1 && nums[low] == nums[low - 1]) {
				low++;
				continue;
			}
			if (high < n - 1 && nums[high] == nums[high + 1]) {
				high--;
				continue;
			}
			if (nums[low] + nums[high] == target) {
				vector<int> v = { -target,nums[low],nums[high] };
				ans.push_back(v);
				low++;
				high--;
			}
			else if (nums[low] + nums[high] > target)
				high--;
			else
				low++;
		}
	}
	return ans;
}





//88 ms	15.7 MB
vector<vector<int>> threeSum(vector<int>& nums) {
	vector<vector<int>> ans;
	int n = nums.size();
	sort(nums.begin(), nums.end());
	for (int i = 0; i < n; ++i) {
		if (nums[i] > 0)//2.剪枝减少了12ms
			break;
		int target = -nums[i];
		int low = i + 1, high = n - 1;
		if (i >= 1 && nums[i] == nums[i - 1])
			continue;
		while (low < high) {
			if (nums[low] + nums[high] == target) {
				vector<int> v = { -target,nums[low],nums[high] };
				ans.push_back(v);
				while (low < high && nums[low] == nums[low + 1]) low++;//1.判断重复加入循环后缩减了16ms
				while (high > low&& nums[high] == nums[high - 1])high--;
				low++, high--;
			}
			else if (nums[low] + nums[high] > target)
				--high;
			else
				++low;
		}
	}
	return ans;
}
